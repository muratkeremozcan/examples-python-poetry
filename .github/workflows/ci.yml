name: Python CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install

      # Only check for syntax errors and undefined names
      - name: Check code quality with flake8
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Find all Python files and check their syntax
      - name: Check Python syntax
        run: |
          poetry run python -c "import py_compile; import glob; [py_compile.compile(file) for file in glob.glob('**/*.py', recursive=True)]"


# Using python -m mypy instead of direct mypy command ensures the tool is run
# through the Python interpreter installed in the current environment, avoiding path resolution issues.
# This approach guarantees that the correct version of mypy is used and that it's properly found
# even if the executable isn't directly in the system PATH
